install.packages('devtools')
install.packages(c("evaluate", "MASS"))
source('~/getdata/idaho.R')
install.packages("xlsx")
install.packages("xlsx")
install.packages("RJavaTools")
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
install.packages("rJava")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx1000m")
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx2000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
options(java.parameters = "-Xmx5000m")
source('~/getdata/idaho.R')
source('~/getdata/idaho.R')
install.packages("XLConnect")
?XLConnect
??XLConnect
set.seed(100)
norm_vec <- rnorm(n=10, mean=5, sd=2)
sample(norm_vec, size = 25, replace=FALSE)
sample(norm_vec, size = 10, replace=FALSE)
install.packages("rpart")
for (i in 1:10) {}
for (i in 1:10) { if (i %% 2 == 0) { cat(paste(i, "is even.\n", sep=" "))}}
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 10, rep = TRUE)))
names(df) <- letters[1:6]
head(df)
fix_missing <- function(x) {
x[x == -99] <- NA
x
}
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
df[] <- lapply(df,fix_missing)
View(df)
setwd("~/datasciencecoursera/functional_R")
head(mtcars)
lapply(mtcars, function(x) length(unique(x)))
head(mtcars)
length(mtcars$mpg)
length(unique(mtcars$mpg))
lapply(mtcars, function(x) length(unique(x)))
(function(x) 3)()
(function(x) 3)(x + 10)
(function(x) x + 3)(10)
match.fun(meawn)
match.fun(mean)
lapply(mtcars, function(x)(std))
lapply(mtcars, function(x)(sd))
lapply(mtcars[], function(x)(sd))
lapply(mtcars, function(x) sd())
lapply(mtcars, function(x) sd(x))
lapply(mtcars, function(x) sd(unique(x)))
function (x) integrate(f=y = x ^ 2 - x,lower=0,upper=10)
function (x) integrate(y = x ^ 2 - x,lower=0,upper=10)
function(x) integrate(y = x ^ 2 - x,lower=0,upper=10)
function(y = x ^ 2 - x) integrate(function,lower=0,upper=10)
function(y = x ^ 2 - x) integrate(function(),lower=0,upper=10)
function(x) integrate(x ^ 2 - x, lower=0, upper=10)
function(x ^ 2 - x) integrate(x ^ 2 - x, lower=0, upper=10)
function(x) integrate(x, lower=10, upper=10)
j <- function(x) integrate(x, lower=10, upper=10)
j <- function(x) integrate(x ^ 2 - x, lower=10, upper=10)
j
j <- function(x ^ 2 - x) integrate(x, lower=10, upper=10)
integrate(x ^ 2 -x, function(x))
x ^ 2 -x, function(x) integrate(x, lower=0, upper=10))
(x ^ 2 - x), function(x) integrate(x, lower=0, upper=10))
(x ^ 2 - x) function(x) integrate(x, lower=0, upper=10))
function(x^2-x) integrate(x, lower=0, upper=10))
